// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace SkaterXLModTemplateWizard.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\blendermf\Documents\Visual Studio 2017\Projects\SkaterXLModTemplate\SkaterXLModTemplateWizard\Templates\InfoTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class InfoTemplate : BaseTemplate
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            this.Write("{\r\n  \"Id\": \"");
            
            #line 14 "C:\Users\blendermf\Documents\Visual Studio 2017\Projects\SkaterXLModTemplate\SkaterXLModTemplateWizard\Templates\InfoTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AuthorID));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 14 "C:\Users\blendermf\Documents\Visual Studio 2017\Projects\SkaterXLModTemplate\SkaterXLModTemplateWizard\Templates\InfoTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModNamespace));
            
            #line default
            #line hidden
            this.Write("\",\r\n  \"DisplayName\": \"");
            
            #line 15 "C:\Users\blendermf\Documents\Visual Studio 2017\Projects\SkaterXLModTemplate\SkaterXLModTemplateWizard\Templates\InfoTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DisplayName));
            
            #line default
            #line hidden
            this.Write("\",\r\n  \"Author\": \"");
            
            #line 16 "C:\Users\blendermf\Documents\Visual Studio 2017\Projects\SkaterXLModTemplate\SkaterXLModTemplateWizard\Templates\InfoTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(AuthorName));
            
            #line default
            #line hidden
            this.Write("\",\r\n  \"Version\": \"0.0.1\",\r\n  \"ManagerVersion\": \"0.12.3\",\r\n");
            
            #line 19 "C:\Users\blendermf\Documents\Visual Studio 2017\Projects\SkaterXLModTemplate\SkaterXLModTemplateWizard\Templates\InfoTemplate.tt"
 if (UseModMenu) { 
            
            #line default
            #line hidden
            this.Write("  \"Requirements\": [ \"blendermf.XLShredMenu-0.0.5\" ],\r\n");
            
            #line 21 "C:\Users\blendermf\Documents\Visual Studio 2017\Projects\SkaterXLModTemplate\SkaterXLModTemplateWizard\Templates\InfoTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("  \"AssemblyName\": \"");
            
            #line 22 "C:\Users\blendermf\Documents\Visual Studio 2017\Projects\SkaterXLModTemplate\SkaterXLModTemplateWizard\Templates\InfoTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModNamespace));
            
            #line default
            #line hidden
            this.Write(".dll\",\r\n  \"EntryMethod\": \"");
            
            #line 23 "C:\Users\blendermf\Documents\Visual Studio 2017\Projects\SkaterXLModTemplate\SkaterXLModTemplateWizard\Templates\InfoTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModNamespace));
            
            #line default
            #line hidden
            this.Write(".Main.Load\"");
            
            #line 23 "C:\Users\blendermf\Documents\Visual Studio 2017\Projects\SkaterXLModTemplate\SkaterXLModTemplateWizard\Templates\InfoTemplate.tt"

if (ModHomepage.Trim() != "") { 
            
            #line default
            #line hidden
            this.Write(",\r\n  \"HomePage\": \"");
            
            #line 25 "C:\Users\blendermf\Documents\Visual Studio 2017\Projects\SkaterXLModTemplate\SkaterXLModTemplateWizard\Templates\InfoTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModHomepage.Trim()));
            
            #line default
            #line hidden
            this.Write("\"");
            
            #line 25 "C:\Users\blendermf\Documents\Visual Studio 2017\Projects\SkaterXLModTemplate\SkaterXLModTemplateWizard\Templates\InfoTemplate.tt"
 } 
            
            #line default
            #line hidden
            
            #line 25 "C:\Users\blendermf\Documents\Visual Studio 2017\Projects\SkaterXLModTemplate\SkaterXLModTemplateWizard\Templates\InfoTemplate.tt"
 
if (ModRepo.Trim() != "") { 
            
            #line default
            #line hidden
            this.Write(",\r\n  \"Repository\": \"");
            
            #line 27 "C:\Users\blendermf\Documents\Visual Studio 2017\Projects\SkaterXLModTemplate\SkaterXLModTemplateWizard\Templates\InfoTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ModRepo.Trim()));
            
            #line default
            #line hidden
            this.Write("\"");
            
            #line 27 "C:\Users\blendermf\Documents\Visual Studio 2017\Projects\SkaterXLModTemplate\SkaterXLModTemplateWizard\Templates\InfoTemplate.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n}");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 1 "C:\Users\blendermf\Documents\Visual Studio 2017\Projects\SkaterXLModTemplate\SkaterXLModTemplateWizard\Templates\InfoTemplate.tt"

private bool _UseModMenuField;

/// <summary>
/// Access the UseModMenu parameter of the template.
/// </summary>
private bool UseModMenu
{
    get
    {
        return this._UseModMenuField;
    }
}

private string _ModNamespaceField;

/// <summary>
/// Access the ModNamespace parameter of the template.
/// </summary>
private string ModNamespace
{
    get
    {
        return this._ModNamespaceField;
    }
}

private string _AuthorIDField;

/// <summary>
/// Access the AuthorID parameter of the template.
/// </summary>
private string AuthorID
{
    get
    {
        return this._AuthorIDField;
    }
}

private string _AuthorNameField;

/// <summary>
/// Access the AuthorName parameter of the template.
/// </summary>
private string AuthorName
{
    get
    {
        return this._AuthorNameField;
    }
}

private string _DisplayNameField;

/// <summary>
/// Access the DisplayName parameter of the template.
/// </summary>
private string DisplayName
{
    get
    {
        return this._DisplayNameField;
    }
}

private string _ModHomepageField;

/// <summary>
/// Access the ModHomepage parameter of the template.
/// </summary>
private string ModHomepage
{
    get
    {
        return this._ModHomepageField;
    }
}

private string _ModRepoField;

/// <summary>
/// Access the ModRepo parameter of the template.
/// </summary>
private string ModRepo
{
    get
    {
        return this._ModRepoField;
    }
}


/// <summary>
/// Initialize the template
/// </summary>
public override void Initialize()
{
    base.Initialize();
    if ((this.Errors.HasErrors == false))
    {
bool UseModMenuValueAcquired = false;
if (this.Session.ContainsKey("UseModMenu"))
{
    this._UseModMenuField = ((bool)(this.Session["UseModMenu"]));
    UseModMenuValueAcquired = true;
}
if ((UseModMenuValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("UseModMenu");
    if ((data != null))
    {
        this._UseModMenuField = ((bool)(data));
    }
}
bool ModNamespaceValueAcquired = false;
if (this.Session.ContainsKey("ModNamespace"))
{
    this._ModNamespaceField = ((string)(this.Session["ModNamespace"]));
    ModNamespaceValueAcquired = true;
}
if ((ModNamespaceValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ModNamespace");
    if ((data != null))
    {
        this._ModNamespaceField = ((string)(data));
    }
}
bool AuthorIDValueAcquired = false;
if (this.Session.ContainsKey("AuthorID"))
{
    this._AuthorIDField = ((string)(this.Session["AuthorID"]));
    AuthorIDValueAcquired = true;
}
if ((AuthorIDValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("AuthorID");
    if ((data != null))
    {
        this._AuthorIDField = ((string)(data));
    }
}
bool AuthorNameValueAcquired = false;
if (this.Session.ContainsKey("AuthorName"))
{
    this._AuthorNameField = ((string)(this.Session["AuthorName"]));
    AuthorNameValueAcquired = true;
}
if ((AuthorNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("AuthorName");
    if ((data != null))
    {
        this._AuthorNameField = ((string)(data));
    }
}
bool DisplayNameValueAcquired = false;
if (this.Session.ContainsKey("DisplayName"))
{
    this._DisplayNameField = ((string)(this.Session["DisplayName"]));
    DisplayNameValueAcquired = true;
}
if ((DisplayNameValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("DisplayName");
    if ((data != null))
    {
        this._DisplayNameField = ((string)(data));
    }
}
bool ModHomepageValueAcquired = false;
if (this.Session.ContainsKey("ModHomepage"))
{
    this._ModHomepageField = ((string)(this.Session["ModHomepage"]));
    ModHomepageValueAcquired = true;
}
if ((ModHomepageValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ModHomepage");
    if ((data != null))
    {
        this._ModHomepageField = ((string)(data));
    }
}
bool ModRepoValueAcquired = false;
if (this.Session.ContainsKey("ModRepo"))
{
    this._ModRepoField = ((string)(this.Session["ModRepo"]));
    ModRepoValueAcquired = true;
}
if ((ModRepoValueAcquired == false))
{
    object data = global::System.Runtime.Remoting.Messaging.CallContext.LogicalGetData("ModRepo");
    if ((data != null))
    {
        this._ModRepoField = ((string)(data));
    }
}


    }
}


        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
}
